#version 330 core

in vec2 texture_coords;
in vec3 normal_positions;
in vec3 to_light_vector;
in vec3 to_camera_vector;

out vec4 frag_color;

uniform sampler2D our_texture;
uniform float ambient;
uniform vec3 light_color;
uniform float reflectivity;
uniform float shine_damper;

void main(){
	vec3 unit_normal_positions = normalize(normal_positions);
	vec3 unit_light_positions = normalize(to_light_vector);
	
	float nDot1 = dot(unit_normal_positions, unit_light_positions);
	float brightness = max(nDot1, 0.0);
	vec3 diffuse = brightness * light_color;
	
	vec3 unit_to_camera_vector = normalize(to_camera_vector);
	vec3 light_direction = -unit_light_positions;
	vec3 reflected_light_direction = reflect(light_direction, unit_normal_positions);

	float specular_factor = dot(reflected_light_direction, unit_to_camera_vector);
	specular_factor = max(specular_factor, 0.0);
	float damped_factor = pow(specular_factor, shine_damper);
	vec3 final_specular = damped_factor * reflectivity * light_color;

	frag_color = vec4(diffuse, 1.0) * texture(our_texture, texture_coords) + vec4(final_specular, 1.0);;
}